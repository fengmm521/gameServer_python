#!/usr/bin/env python# -*- coding: utf-8 -*-#收接邮箱线程管理器import threadingimport QueueObjsclass QueueManger():    instance=None    mutex=threading.Lock()    def __init__(self):        self.threads = {}                                                                                   #使用线程名保存的线程接收邮箱列队    def saveThreadMailQueueWithName(self,tname,tmQueue):                                                    #在列队管理器中使用线程名记录一个线程邮箱列队        self.threads[tname] = tmQueue    def delThreadMailQueueWithName(self,tname):                                                             #删除一个已知名字的线程邮箱列队        self.threads.pop(tname)    def getThreadMailQueueWithName(self,tname):                                                             #在列队管理器中使用线程名寻找一个线程邮箱列队        if self.threads.has_key(tname):            return self.threads[tname]        else:            print 'erro:QueueMangerT not find thread with name:%s----(getThreadMailQueueWithName)'%(tname)            return None    def isExistThreadWithName(self,tname):                                                                  #查看列队管理器中是否有某个线程名的邮箱存在        if self.threads.has_key(tname):            return True        else:            return False    def sendDataToThreadWithName(self,data,dataType,fromTName,toTName,isBack = False):          #通过线程列队管理器向某个线程发送数据,basedata,表示对象间的默认数据        qumobj = QueueObjs.QueueMangerObj(data,dataType,fromTName,toTName,isBack)        if self.threads.has_key(toTName):            self.threads[toTName].put(qumobj)        else:            print 'erro:QueueMangerT not find thread with name:%s'%(toTName)    @staticmethod    def GetInstance():        if(QueueManger.instance==None):            QueueManger.mutex.acquire()            QueueManger.instance=QueueManger()            QueueManger.mutex.release()        return QueueManger.instance