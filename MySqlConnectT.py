#!/usr/bin/env python# -*- coding: utf-8 -*-#!/usr/bin/env python# -*- coding: utf-8 -*-import threading  import mysqlobjimport Queue#import copyfrom QueueManger import QueueMangerimport QueueObjsimport askMysqlType    class connectThread(threading.Thread):      def __init__(self, t_name,otherName,tmanger):          threading.Thread.__init__(self, name=t_name)         self.mysqlobj = mysqlobj.mysqlobj(defDB = 'server')        self.otherName = otherName        self.queumanger = QueueManger.GetInstance()        self.threadmanger = tmanger        self.requstqueue = Queue.Queue(2000)                self.queumanger.saveThreadMailQueueWithName(t_name, self.requstqueue)        if self.otherName != '':            self.responeQueue = self.queumanger.getThreadMailQueueWithName(otherName)           #初始化mysql调用返回线程        else:            self.responeQueue = None        self.askid = ''                     #作数据库mysql请求的帐号        self.askType =  1                   #1.线程空闲，可以接受请求,2.正在发送数据库请求，等待返回结果,3.数据库结果已返回或请求超时，正在处理请求结果        self.askobj = None              #当前请求连接数据对象    def _setNewConnect(self,queueobj):        self.askType = 2        self.askobj = queueobj.data            #接收mysql请求数据对象        self._sendRequest()    def _sendRequest(self):        if self.askobj.dataType == -1:            #other线程释放mysql控制权            self.otherName = None            self.responeQueue = None        elif self.askobj.dataType == 0:#接收到来自列表管理器的数据            #线程重新分配mysql连            self.otherName = self.askobj.data            self.responeQueue = self.queumanger.getThreadMailQueueWithName(self.otherName)            #self.mysqlobj.connectMysql()        elif self.askobj.dataType == 5:#插入数据并获取数据插入id            mysqlErro = 0            try:                cmdstrs = self.askobj.data[0].split('\n')                cmdstrs.append(self.askobj.data[1])                for cmdstr in cmdstrs:                    if cmdstr != '':                        self.askobj.count =  self.mysqlobj.execute(cmdstr)                #5.获取插入ID                self.askobj.data = self.mysqlobj.getAllDat()                self.askType = 3                self.askobj.threadname = self.getName()                queueobj = QueueObjs.QueueMangerObj(self.askobj,QueueObjs.Flog_MysqlAskObj,self.getName(),self.otherName)                #self.responeQueue.put(copy.deepcopy(queueobj))                self.responeQueue.put(queueobj)            except Exception,e:                 mysqlErro = e[0]                self.askobj.count = 0                self.askobj.data = ''                self.askobj.erro = mysqlErro                self.askobj.threadname = self.getName()                queueobj = QueueObjs.QueueMangerObj(self.askobj,QueueObjs.Flog_MysqlAskObj,self.getName(),self.otherName)                #self.responeQueue.put(copy.deepcopy(queueobj))                self.responeQueue.put(queueobj)        else:            mysqlErro = 0            try:                if self.askobj.askid == askMysqlType.SQL_SelectLoginAccount:                    cmdstrs = self.askobj.data.split('\n')                    backdatas = []                    for cmdstr in cmdstrs:                        if cmdstr != '':                            self.askobj.count =  self.mysqlobj.execute(cmdstr)                            backdatas.append(self.mysqlobj.getAllDat())                    self.askobj.count =  len(backdatas)                    self.askobj.data = backdatas                    self.askType = 3                    self.askobj.threadname = self.getName()                    queueobj = QueueObjs.QueueMangerObj(self.askobj,QueueObjs.Flog_MysqlAskObj,self.getName(),self.otherName)                    #self.responeQueue.put(copy.deepcopy(queueobj))                    self.responeQueue.put(queueobj)                else:                    cmdstrs = self.askobj.data.split('\n')                    for cmdstr in cmdstrs:                        if cmdstr != '':                            self.askobj.count =  self.mysqlobj.execute(cmdstr)                    if self.askobj.dataType == 4 or self.askobj.dataType == 1:#1.增，2.删，3.改，4.查,5.获取插入ID                        self.askobj.data = self.mysqlobj.getAllDat()                    else:                        print "mysqlbackdata_____________:\n",self.mysqlobj.getAllDat()                        self.askobj.data = ''                    self.askType = 3                    self.askobj.threadname = self.getName()                    queueobj = QueueObjs.QueueMangerObj(self.askobj,QueueObjs.Flog_MysqlAskObj,self.getName(),self.otherName)                    #self.responeQueue.put(copy.deepcopy(queueobj))                    self.responeQueue.put(queueobj)            except Exception,e:                 mysqlErro = e[0]                self.askobj.count = 0                self.askobj.data = ''                self.askobj.erro = mysqlErro                self.askobj.threadname = self.getName()                queueobj = QueueObjs.QueueMangerObj(self.askobj,QueueObjs.Flog_MysqlAskObj,self.getName(),self.otherName)                #self.responeQueue.put(copy.deepcopy(queueobj))                self.responeQueue.put(queueobj)        self.askType = 1                def run(self):        while(True):            if self.askType == 1 and (not self.requstqueue.empty()):  #线程是否空闲，请求队列中是否有请求对象                queueobj = self.requstqueue.get_nowait()                self._setNewConnect(queueobj)