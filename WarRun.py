#!/usr/bin/env python# -*- coding: utf-8 -*-import pkwarflogimport WarTimerimport time# //----------战报数据定义开始--------------------------------# //英雄出场总血量,坐标和阵营class WarHeroInit():    def __init__(self,phero):        self.heroNetID = phero.heroNID              #英雄网络ID        self.heroBlood = phero.blood                #英雄总血量        self.heroPoint = phero.getOneIntPoint()     #英雄初始坐标,坐标的计算方法为point=(y*Width+x),获取x=point%y,y=point/Width,其中x,y,point,Width(宽度)均为整数        self.heroCamp = phero.heroCamp              #英雄所属阵营,1.上方阵营,2.下方阵营    def getProtobufInitData(self,initdatas):        hinit = initdatas.add()        hinit.pHeroNetID = self.heroNetID        hinit.pHeroBlood = self.heroBlood        hinit.pHeroPoint = self.heroPoint        hinit.pHeroCamp = self.heroCamp# //战报触发技能事件class WarSKillEvent():    def __init__(self,skillType,skillCID,pSkillHeroNID,beSkillHeroNIDs):        self.skillType = skillType                  #战斗中触发的技能类型:1.英雄技能,2.装备特效技能        self.skillCID = skillCID                    #所解发技能对应的配置ID,使用配置ID可从配置表中读取要显示的技能效果        self.skillHeroNID = pSkillHeroNID           #技能释放方网络ID        self.beSkillHeroNIDs = beSkillHeroNIDs        #技能承受方网络ID,如果释放方是一个多目标技能,则这里的技能承受方会有多个英雄网络ID    def getProtobufWarSkillEventData(self,skillevents):        wevent = skillevents.add()        wevent.pSkillType = self.skillType        wevent.pSkillCID = self.skillCID        wevent.pSkillHeroNID = self.skillHeroNID        if type(self.beSkillHeroNIDs) == list:            for sx in self.beSkillHeroNIDs:                wevent.pBeSkillHeroNID.append(sx)        elif type(self.beSkillHeroNIDs) == int:            wevent.pBeSkillHeroNID.append(self.beSkillHeroNIDs)# //战斗中英雄移动事件class WarHeroMoveEvent():    def __init__(self,moveHeroNID,movePoint,moveCastTime):        self.moveHeroNID = moveHeroNID              #有移动动作的英雄网络ID        self.movePoint = movePoint                  #移动的目标坐标,坐标的计算方法为point=(y*Width+x),获取x=point%y,y=point/Width,其中x,y,point,Width(宽度)均为整数        self.moveCastTime = moveCastTime            #移动到目标坐标所需时间,时间单位为秒    def getProtobuffWarHeroMoveEventData(self,hmoveEvents):        mevevt = hmoveEvents.add()        mevevt.moveHeroNID = self.moveHeroNID        mevevt.movePoint = int(self.movePoint)        mevevt.moveCastTime = self.moveCastTime# //战报英雄血量变化事件class WarBloodChangeEvent():    def __init__(self,pHeroNID,pChangeValue):        self.heroNid = pHeroNID                     #血量有变化的英雄网络ID        self.changeValue = pChangeValue             #英雄血量变化值,负值表示掉血，正值表示吸血,数值为0时表示英雄死亡    def getProtobuffWarBloodEventData(self,bloodevents):        bevent = bloodevents.add()        bevent.pHeroNID = self.heroNid        bevent.pChangeValue = self.changeValue# //战斗战报中的单次事件class WarOnceEvent():    def __init__(self,pTime,attackHero = 0):        self.pTime = pTime                          #事件发生时间,时间单位为毫秒,从0毫秒战斗开始到事件发生时的毫秒数        self.attackHero = attackHero                #攻击事件时此值为攻击方英雄网络ID,此值小于等于0时表示本次事件为非英雄攻击事件,比如只有英雄移动这种类型的事件        self.warSkillEvents = []                    #触发的所有技能信息        self.warHeroMoveEvents = []                 #有移动的英雄        self.warBloodChangeEvents = []              #有血量变化的英雄    def getProtobuffWarOnceEvent(self,onceevents):        oevevt = onceevents.add()        oevevt.pTime = int(self.pTime*1000.0)        oevevt.attackHero = self.attackHero        for se in self.warSkillEvents:            se.getProtobufWarSkillEventData(oevevt.warSkillEffect)        for he in self.warHeroMoveEvents:            he.getProtobuffWarHeroMoveEventData(oevevt.warMove)        for be in self.warBloodChangeEvents:            be.getProtobuffWarBloodEventData(oevevt.warBlood)# //一次战斗的战报数据    class WarData():    def __init__(self,heroInits):        self.heroInits = heroInits                    #初始化所有英雄血量,坐标,阵营信息        self.warDatas = []                          #整个战斗过程数据        self.warResult = 0                          #战斗结果,1.上方胜,2.下方胜,3.战斗超时    def getProtobufWarData(self,pwardata):        for hi in self.heroInits:            hi.getProtobufInitData(pwardata.heroInit)        for wd in self.warDatas:            wd.getProtobuffWarOnceEvent(pwardata.warDatas)        pwardata.warResult = self.warResult        # //----------战报数据定义结束---------------------------class WarRun():    def __init__(self,pkwart,uheros,dheros):        self.pkwarT = pkwart        self.uheros = uheros        self.dheros = dheros        self.lastTime = 0   #上次事件发生时间        self.lastEventType = pkwarflog.flog_eventInit  #上次事件发生类型        self.warSKillEvents = []                       #技能事件        self.warHeroMoveEvents = []                    #上次英雄移动事件        self.warBloodChangeEvents = []                 #上次英雄血量改变事件        self.attackHeroNID = 0                         #攻击动作的英雄网络ID        self.warData = None                            #英雄战报                #定时器相关        self.eventlist = []             #事件运行定时器列表        self.nowTime = 0        self.nowRunTimer = None         #从列表中取出的当前回调的定时器        self.isWarNotEnd = True    def start(self):        heroinits = []        for uh in self.uheros:            uh.warRun = self            uh.heroSetPoint()            tmph = WarHeroInit(uh)            heroinits.append(tmph)        for dh in self.dheros:            dh.warRun = self            dh.heroSetPoint()            tmph = WarHeroInit(dh)            heroinits.append(tmph)        self.warData = WarData(heroinits)        self.warLoop()    def warLoop(self):        self.nowTime = 0        for uh in self.uheros:            uh.warStart()        for dh in self.dheros:            dh.warStart()        while self.isWarNotEnd:            if self.eventlist:                ptimer = self.eventlist.pop(0)                ptimer.updata()                if self.warBloodChangeEvents or self.warHeroMoveEvents or self.warSKillEvents:                    onceEvent = WarOnceEvent(self.nowTime,self.attackHeroNID)                    onceEvent.warBloodChangeEvents = self.warBloodChangeEvents                    onceEvent.warHeroMoveEvents = self.warHeroMoveEvents                    onceEvent.warSkillEvents = self.warSKillEvents                    self.warData.warDatas.append(onceEvent)                    self.attackHeroNID = 0                    self.warBloodChangeEvents = []                    self.warHeroMoveEvents = []                    self.warSKillEvents = []                self.nowTime = ptimer.nextRun            else:                print 'list empty and back'                break        uresult = False        dresult = False        for uh in self.uheros:            if uh.warBlood > 0:                uresult = True        for dh in self.dheros:            if dh.warBlood > 0:                dresult = True        if uresult and dresult:            self.warData.warResult = 3  #战斗超时        elif uresult:            self.warData.warResult = 1  #上边胜利        elif dresult:            self.warData.warResult = 2  #下边胜利        else:            self.warData.warResult = 0  #战斗出错        self.pkwarT.warEnd(self.warData)    def warEnd(self):        self.isWarNotEnd = False      #战斗结束    def addTimerFunc(self,target,callfunc,timespace = 1,isRepeatforever = False,repeattimes = 1,isRunBefor = False,isSendEvent = True,eventKey = 'timer'):##事件类型'move':移动事件类型,'attack':基础攻击事件类型,'timer':简单定时器类型,'debuff':debuff事件类型,'blood':持续掉血类型        wartimer = WarTimer.WarTimer(self,target,callfunc,timespace,repeattimes,isRepeatforever,isRunBefor,isSendEvent = isSendEvent,eventKey = eventKey)        self.updataTimerForList(wartimer)    def removeAllTimer(self,deadhero):        removetimer = []        for pt in range(len(self.eventlist)):            if self.eventlist[pt].target == deadhero:                removetimer.append(pt)        removetimer.sort(reverse=True)        for px in removetimer:            self.eventlist.pop(px)    def getTargetMoveSpeedTimer(self,target):  #获取之前英雄移动耗时，同时移除定时器        #事件类型'move':移动事件类型,'attack':基础攻击事件类型,'timer':简单定时器类型,'debuff':debuff事件类型,'blood':持续掉血类型        evn = 0        for en in range(len(self.eventlist)):            if self.eventlist[en].target == target and self.eventlist[en].eventKey == 'move':                evn = en                break        ptimer = self.eventlist.pop(evn)        return ptimer.timespace    def removeTargetAttackTimer(self,target):        #事件类型'move':移动事件类型,'attack':基础攻击事件类型,'timer':简单定时器类型,'debuff':debuff事件类型,'blood':持续掉血类型        evn = 0        for en in range(len(self.eventlist)):            if self.eventlist[en].target == target and self.eventlist[en].eventKey == 'attack':                evn = en                break        self.eventlist.pop(evn)    def updataTimerForList(self,ptimer):        at = 0        if self.eventlist:            for n in range(len(self.eventlist)):                if ptimer.nextRun <= self.eventlist[n].nextRun:                    at = n                    break                else:                    at = -1            if at == -1:                self.eventlist.append(ptimer)            else:                self.eventlist.insert(at, ptimer)        else:            self.eventlist.append(ptimer)    #测试-------------#         teststr = ''#         for ev in self.eventlist:#             teststr += '%f '%(ev.nextRun)#         print '%s\n'%teststr    #测试结束----------    def onEventHeroAttack(self,pAttackHero):        if self.attackHeroNID == 0:            self.attackHeroNID = pAttackHero.heroNID                                #英雄攻击事件时，传入参数为PKHero对象        else:            print '同一时间出现两个英雄同时攻击事件'                                     #这种情况可能不会出现，因为不同的攻击使用不同的定时器控制，事件管理器是使用定时器触发    def onEventHeroBloodChange(self,heroNID,changeValue):        wbloodevent = WarBloodChangeEvent(heroNID,changeValue)                      #英雄血量改变事件中数据为,英雄网络ID,英雄血量改变量        self.warBloodChangeEvents.append(wbloodevent)    def onEventHeroMove(self,moveHeroNID,movePoint,moveCastTime):        warheromove = WarHeroMoveEvent(moveHeroNID,movePoint,moveCastTime)          #英雄移动事件中数据为一个数组,数组中的数据分别为,英雄网络ID,英雄目标坐标,移动花费时间,[moveHeroNID,movePoint,moveCastTime]        self.warHeroMoveEvents.append(warheromove)    def onEventSkill(self,skillType,skillCID,pSkillHeroNID,beSkillHeroNIDs):        warskills = WarSKillEvent(skillType,skillCID,pSkillHeroNID,beSkillHeroNIDs)  #技能类型(英雄技能或装备技能),skillType,(技能配置ID)skillCID,(释放技能的英雄网络ID)pSkillHeroNID,(技能释放目标的英雄网络ID)beSkillHeroNID]        self.warSKillEvents.append(warskills)